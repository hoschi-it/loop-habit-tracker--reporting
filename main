#!/usr/bin/env python3

# reference: https://pandas.pydata.org/docs/reference/index.html
import pandas as pd
import datetime
from jinja2 import Environment, FileSystemLoader

config = {
    "last_n_days": 30,
    "output_file": "./built/dev1.html",
    "is_dev_mode": False,
    "input_zip": "./example-data.d/csv.zip",
    "habits_blacklist": ["🛁 Haare waschen🔒", "🗓️📸 Kalender geteilt🔒"],
    "cell_values": [
        {
            "original": -1,
            "replacement": '❔',
            "legend": "Forgot to track it.",
        },
        {
            "original": 0,
            "replacement": "❌",
            "legend": "Expectation remained unfullfiled.",
        },
        {
            "original": 1,
            "replacement": '🆗',
            "legend": "Did a regular break.",
        },
        {
            "original": 2,
            "replacement": '✅',
            "legend": "Performed today 💪",
        }
    ],
}


def date_range():
    today = pd.Timestamp.today().date()
    # TODO should input be a range or a date?
    oldest = today - pd.Timedelta(config['last_n_days'], 'd')
    return pd.date_range(start=oldest, end=today, normalize=True)


def scale_down_numeric_values(cell_value):
    if (type(cell_value) == int and cell_value > 10):
        return cell_value / 1000.0
    return cell_value


def prettify(df):
    html_table = df.to_html()

    env = Environment(
        loader=FileSystemLoader(searchpath='./')
    )
    template = env.get_template('template.jinja')
    html = template.render(
        is_dev_mode=config["is_dev_mode"],
        title="Report of Loop Habit Tracker",
        html_table=html_table,
        legend={value["replacement"]: value["legend"]
                for value in config["cell_values"]}
    )

    return html


def filter_dates(df):
    existing_indices_in_range = [
        date for date in date_range() if date in df.index
    ]
    df = df.loc[existing_indices_in_range]
    return df


def numeric_to_symbolic(df):
    df = df.replace(to_replace={
        item["original"]: item["replacement"] for item in config["cell_values"]
    })

    df.index = df.index.strftime('%a %d. %b')
    df = df.map(func=scale_down_numeric_values, na_action='ignore')
    return df


def main():
    CSV_DIR = "./built"

    extract_csv_from_zip(CSV_DIR)
    df = pd.read_csv(
        f'{CSV_DIR}/Checkmarks.csv',
        index_col=0
    )

    df.index = pd.to_datetime(df.index)
    df = filter_dates(df)

    df = df.drop(
        labels=config["habits_blacklist"],
        axis='columns'
    )
    df = numeric_to_symbolic(df)
    df = df.sort_index(ascending=False)

    html = prettify(df.T)

    # XXX work in progress
    with open(config["output_file"], 'w') as file:
        file.write(html)


def extract_csv_from_zip(target_dir='./built'):
    import zipfile
    with zipfile.ZipFile(config["input_zip"], 'r') as zip_ref:
        zip_ref.extract(member='Checkmarks.csv',
                        path=target_dir)


main()
