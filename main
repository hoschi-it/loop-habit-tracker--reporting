#!/usr/bin/env python3

# reference: https://pandas.pydata.org/docs/reference/index.html
import pandas as pd
from jinja2 import Environment, FileSystemLoader
import sys
import locale

config = {
    "last_n_days": 30,
    "output_file": "./built/dev1.html",
    "is_dev_mode": False,
    "blacklist_habits_containing": ["🔒", "✅"],
    "cell_values": [
        {
            "original": -1,
            "replacement": '❔',
            "legend": "Forgot to track it.",
        },
        {
            "original": 0,
            "replacement": "❌",
            "legend": "Expectation remained unfullfiled.",
        },
        {
            "original": 1,
            "replacement": '🆗',
            "legend": "Did a regular break.",
        },
        {
            "original": 2,
            "replacement": '✅',
            "legend": "Performed today 💪",
        }
    ],
}


def date_range():
    today = pd.Timestamp.today().date()
    # TODO should input be a range or a date?
    oldest = today - pd.Timedelta(config['last_n_days'], 'd')
    return pd.date_range(start=oldest, end=today, normalize=True)


# Loop Habit Tracker represents numeric values as by a factor of 1000.
# cell_value: Needs not to have a numeric value that represents a non-numeric state.
def scale_down_numeric_value(cell_value):
    if type(cell_value) == str: return cell_value
    assert (type(cell_value) == int and cell_value > 10), f"Invalid cell value: {cell_value}."
    return cell_value / 1000.0


def prettify(df):
    html_table = df.to_html()

    env = Environment(
        loader=FileSystemLoader(searchpath='./')
    )
    template = env.get_template('template.jinja')
    html = template.render(
        is_dev_mode=config["is_dev_mode"],
        title="Report of Loop Habit Tracker",
        html_table=html_table,
        legend={value["replacement"]: value["legend"]
                for value in config["cell_values"]}
    )

    return html


def filter_dates(df):
    existing_indices_in_range = [
        date for date in date_range() if date in df.index
    ]
    df = df.loc[existing_indices_in_range]
    return df


# Format dates in the DataFrame index to a more readable format
# TODO: test on a system with a different locale
def format_dates(df):
    previous_locale = locale.getlocale(locale.LC_CTYPE)
    set_locale('de_DE.UTF-8')
    df.index = df.index.strftime('%a %d.%m.')
    set_locale(previous_locale)
    return df


def replace_by_configured_symbols(df):
    df.replace(to_replace={
        item["original"]: item["replacement"] for item in config["cell_values"]
    }, inplace=True)


# Convert numeric values to more intuitive symbolic representations
def numeric_to_symbolic(df):
    replace_by_configured_symbols(df)
    format_dates(df)
    df = df.map(func=scale_down_numeric_value, na_action='ignore')
    return df
    

def set_locale(locale_name):
    try:
        locale.setlocale(locale.LC_ALL, locale_name)
    except locale.Error:
        print(f"Warning: Locale '{locale_name}' not supported. Skipping locale setting.")


def main():
    CSV_DIR = "./built"

    # Require input_zip path as a mandatory CLI argument
    if len(sys.argv) < 2:
        print(f"Usage: {sys.argv[0]} <path/to/file.zip>")
        sys.exit(1)
    config["input_zip"] = sys.argv[1]

    extract_csv_from_zip(CSV_DIR)
    df = pd.read_csv(
        f'{CSV_DIR}/Checkmarks.csv',
        index_col=0
    )

    # Drop columns that are completely empty
    df.dropna(axis='columns', how='all', inplace=True)

    df.index = pd.to_datetime(df.index)
    df = filter_dates(df)

    # Drop columns whose name contains any blacklisted substring
    blacklist = config["blacklist_habits_containing"]
    cols_to_drop = [col for col in df.columns if any(b in col for b in blacklist)]
    df = df.drop(labels=cols_to_drop, axis='columns')

    df = df.sort_index(ascending=False)
    df = numeric_to_symbolic(df)

    html = prettify(df.T)

    # XXX work in progress
    with open(config["output_file"], 'w') as file:
        file.write(html)


def extract_csv_from_zip(target_dir='./built'):
    import zipfile
    with zipfile.ZipFile(config["input_zip"], 'r') as zip_ref:
        zip_ref.extract(member='Checkmarks.csv',
                        path=target_dir)


main()
